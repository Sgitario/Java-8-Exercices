package com.sgitario.piksel.discovery;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

public class PremieresComparator {
	
	private static final String BEFORE_TOKEN = "bef";
	private static final String AFTER_TOKEN = "aft";
	private static final String DIFF_TOKEN = "dif";
	
	private Map<String, Premiere> parsePremieres(String file) throws IOException {		
		return Files.readAllLines(Paths.get("src/main/resources/" + file))
			.parallelStream()
				.filter((l) -> !l.isEmpty())
				.collect(() -> new HashMap<String, Premiere>(), (s, l) -> { Premiere p = parsePremiere(l); s.put(p.getKey(), p); }, (s1, s2) -> s1.putAll(s2));
	}
	
	private Collection<DiffPremiere> diffPremieres(List<Premiere> before,
			List<Premiere> after) {
		return after.stream()
			.collect(() -> new HashSet<DiffPremiere>(), 
					(s, p) -> {
						Premiere before = after.
						
						s.add(parsePremiere(l));
					}, (s1, s2) -> s1.addAll(s2));
		
		return null;
	}
	
	private Premiere parsePremiere(String l) {
		Premiere p = new Premiere();
		String[] arr = l.split(",");
		p.datamartId = arr[0].trim();
		
		if (arr.length > 0) {
			p.langCode = arr[1].trim();
			
			if (arr.length > 1) {
				p.langDue = arr[2].trim();
			}
		}
		
		return p;
	}
	
	public static void main(String[] args) throws IOException {
		PremieresComparator c = new PremieresComparator();
		
		List<Premiere> before = c.parsePremieres("report_after.lst");
		List<Premiere> after = c.parsePremieres("report_after.lst");
		Collection<DiffPremiere> diff = c.diffPremieres(before, after);
		diff.stream().forEach(System.out::println);
	}

	class Premiere {
		String datamartId;
		String langCode;
		String langDue;
		
		public String getKey() {
			return null;
		}
	}
	
	class DiffPremiere extends Premiere {
		String previousLangDue;
		
		/**
		 * Datamart ID, Lang Code, New Lang Due, Old Lang Due
		 */
		@Override
		public String toString() {
			return String.format("%s,%s,%s,%s", datamartId, langCode, langDue, previousLangDue);
		}
	}
}
