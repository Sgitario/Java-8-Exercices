package com.sgitario.chapter6;

import static java.util.stream.Collectors.*;

import java.util.List;
import java.util.Map;
import java.util.function.Predicate;
import java.util.stream.Collector;
import java.util.stream.IntStream;

public class Primes implements Collector<Integer, Map<Boolean, List<Integer>>, Map<Boolean, List<Integer>>> {

	public Map<Boolean, List<Integer>> partitionPrimes(int n) {
		return IntStream.rangeClosed(2, n).boxed()
	                .collect(partitioningBy(candidate -> isPrime(candidate)));
	}
	
	public static boolean isPrime(List<Integer> primes, int candidate) {
	    int candidateRoot = (int) Math.sqrt((double) candidate);
	    return takeWhile(primes, i -> i <= candidateRoot)
	    		.stream()
                .noneMatch(p -> candidate % p == 0);
	}
	
	public static <A> List<A> takeWhile(List<A> list, Predicate<A> p) {
		int i = 0;
		for (A item : list) {
			if (!p.test(item)) {
				return list.subList(0, i);
			}
			
			i++;
		}
		
		return list;
	}
	
	public static void main(String[] args) {
		Primes primes = new Primes();
		
		System.out.println(primes.partitionPrimes(100).get(true));
	}

}
